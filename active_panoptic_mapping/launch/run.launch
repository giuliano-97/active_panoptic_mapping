<launch>
    <!-- General arguments -->
    <arg name="namespace" default="active_panoptic_mapping"/>

    <arg name="visualize" default="true"/> 
    <arg name="has_screen" default="true"/>
    <arg name="record" default="false"/>
    <arg name="out_dir" default="/media/giuliano/wd_ssd/runs/replica"/>
    <arg name="datasets_dir" default="$(optenv DATASETS /media/giuliano/wd_ssd/datasets)"/>

    <!-- Habitat environment config -->
    <arg name="scene" default="replica/apartment_0"/>
    <arg name="environment_config" default="habitat/environments/$(arg scene).yaml" />
    <arg name="habitat_config" default="habitat/replica_embodied.yaml"/>

    <!-- Mapper config -->
    <arg name="mapper_config" default="mapper/variable_count.yaml"/>

    <!-- Planner config -->
    <arg name="planner_config" default="planner/active_panoptic_mapping_planner.yaml"/>

    <!-- Load environment params in global namespace -->
    <rosparam file="$(find active_panoptic_mapping)/config/$(arg environment_config)" command="load"/>
    
    <!-- Habitat client node -->
    <node pkg="habitat_ros" name="habitat_sim_node" type="habitat_sim_node.py" output="screen" required="true">
        <!-- Config -->
        <rosparam file="$(find active_panoptic_mapping)/config/$(arg habitat_config)" command="load" />
        <param name="scene_file" value="$(arg datasets_dir)/$(arg scene)/habitat/mesh_semantic.ply"/>
        <param name="wait" value="5"/>

        <!-- Topics -->
        <remap from="~rgb" to="$(arg namespace)/color_image"/>
        <remap from="~depth" to="$(arg namespace)/depth_image"/>
        <remap from="~instance" to="$(arg namespace)/gt_instance_seg"/>
        <remap from="~semantic" to="$(arg namespace)/gt_semantic_seg"/>
        <remap from="~pose" to="$(arg namespace)/pose"/>
        <remap from="~cmd_trajectory" to="$(arg namespace)/command/trajectory"/>
        <remap from="~odom" to="$(arg namespace)/odometry"/>
    </node>

    <!-- Online panoptic segmentation predictor -->
    <node pkg="active_panoptic_mapping" type="pano_seg_predictor.py" name="pano_seg_node" output="screen">
        <!-- Config -->
        <rosparam file="$(find active_panoptic_mapping)/config/pano_seg/mask2former.yaml"/>
        <param name="~use_groundtruth" value="true"/> <!-- Use gt for debugging on machine with no GPU -->

        <!-- Topics -->
        <remap from="~input_image" to="$(arg namespace)/color_image" />  
        <remap from="~pano_seg" to="$(arg namespace)/segmentation_image" />  
        <remap from="~labels" to="$(arg namespace)/segmentation_labels" />
        <remap from="~gt_instance_seg" to="$(arg namespace)/gt_instance_seg"/>
        <remap from="~gt_semantic_seg" to="$(arg namespace)/gt_semantic_seg"/>
        <remap from="~pano_seg_vis" to="$(arg namespace)/pano_seg_vis"/>
    </node>

    <!-- Mapper + Planner -->
    <node name="active_panoptic_mapping_node" pkg="active_panoptic_mapping" type="active_panoptic_mapping_node" output="screen">
        <!-- Mapper -->
        <rosparam file="$(find active_panoptic_mapping)/config/$(arg mapper_config)"/>
        <param name="labels/file_name" value="$(find active_panoptic_mapping)/config/mapper/nyu40_detectron_labels.csv"/>
        <param name="data_writer/output_directory" value="$(arg out_dir)/logs"/>

        
        <!-- Planner -->
        <rosparam file="$(find active_panoptic_mapping)/config/$(arg planner_config)"/>
        <param name="visualize" value="$(arg visualize)" />
             
        <!-- Topics -->
        <remap from="color_image_in" to="$(arg namespace)/color_image"/>
        <remap from="depth_image_in" to="$(arg namespace)/depth_image"/>
        <remap from="segmentation_image_in" to="$(arg namespace)/segmentation_image"/>
        <remap from="labels_in" to="$(arg namespace)/segmentation_labels"/>
        <remap from="pose_stamped" to="$(arg namespace)/pose"/>
        <remap from="command/trajectory" to="$(arg namespace)/command/trajectory"/>
        <remap from="odometry" to="$(arg namespace)/odometry"/>
        <remap from="visualization" to="$(arg namespace)/visualization"/>
    </node>   

    <!-- Static Transforms -->
    <node pkg="tf" type="static_transform_publisher" name="tf_odom_world" args="0 0 0 0 0 0 1 /world /odom 100"/>  

    <!-- RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find active_panoptic_mapping)/rviz/devel.rviz" if="$(eval arg('visualize') and arg('has_screen'))"/>   

    <!-- Rosbag -->
    <node name="rosbag_recorder" pkg="rosbag" type="record" 
        args="-o $(arg out_dir)/bags/room_2 
            /tf /tf_static /trajectory_visualization 
            /$(arg namespace)/color_image /$(arg namespace)/depth /$(arg namespace)/odometry /$(arg namespace)/pose 
            /active_panoptic_mapping_node/visualization/planning/planning_slice /active_panoptic_mapping_node/visualization/submaps/bounding_volumes /active_panoptic_mapping_node/visualization/submaps/free_space_tsdf /active_panoptic_mapping_node/visualization/submaps/mesh /active_panoptic_mapping_node/visualization/submaps/tsdf_blocks /active_panoptic_mapping_node/visualization/tracking/color /active_panoptic_mapping_node/visualization/tracking/input /active_panoptic_mapping_node/visualization/tracking/rendered /active_panoptic_mapping_node/visualization/tracking/tracked" 
        if="$(arg record)"/>
        <!-- /active_panoptic_mapping_node/visualization/planning/planning_slice /active_panoptic_mapping_node/visualization/submaps/bounding_volumes /active_panoptic_mapping_node/visualization/submaps/free_space_tsdf /active_panoptic_mapping_node/visualization/submaps/mesh /active_panoptic_mapping_node/visualization/submaps/tsdf_blocks /active_panoptic_mapping_node/visualization/tracking/color /active_panoptic_mapping_node/visualization/tracking/input /active_panoptic_mapping_node/visualization/tracking/rendered /active_panoptic_mapping_node/visualization/tracking/tracked  -->
</launch>